package com.esprit.pi.constructify.controllers;

import com.esprit.pi.constructify.entities.Role;
import com.esprit.pi.constructify.entities.User;
import com.esprit.pi.constructify.services.IUserService;
import jakarta.validation.Valid;
import lombok.AllArgsConstructor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;

@RestController
@AllArgsConstructor
@CrossOrigin(origins = "http://localhost:4200")
@RequestMapping("/user")
public class UserController {
    @Autowired
    private IUserService userService;


    @PostMapping("/register")
    public ResponseEntity<?> registerUser(@Valid @RequestBody User user, BindingResult result) {
        if (result.hasErrors()) {
            return ResponseEntity.badRequest().body(result.getAllErrors());
        }

        if (userService.existsByEmail(user.getEmail())) {
            return ResponseEntity.badRequest().body("Email already in use");
        }

        user.setPassword(userService.encodePassword(user.getPassword()));

        User savedUser = userService.saveUser(user);

        // Envoie la réponse avec des en-têtes explicites
        HttpHeaders headers = new HttpHeaders();
        headers.add(HttpHeaders.CONTENT_TYPE, "application/json");
        return new ResponseEntity<>(savedUser, headers, HttpStatus.OK);
    }


    @GetMapping("/all")
    public ResponseEntity<List<User>> getAllUsers() {
        List<User> users = userService.getAllUsers();
        return ResponseEntity.ok(users);
    }

    @GetMapping("/getUserByRole/{role}")
    public List<User> getUsersByRole(@PathVariable Role role) {
        return userService.getUsersByRole(role);
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Map<String, String>> deleteUser(@PathVariable("id") Long id) {
        try {
            userService.deleteUser(id);
            Map<String, String> response = new HashMap<>();
            response.put("message", "Utilisateur supprimé avec succès"); // Renvoie un objet JSON
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            Map<String, String> response = new HashMap<>();
            response.put("error", "Utilisateur non trouvé"); // Renvoie un objet JSON en cas d'erreur
            return ResponseEntity.status(404).body(response);
        }
    }

    @PutMapping("/UpdateUserRole/{id}")
    public ResponseEntity<User> updateUserRole(@PathVariable Long id, @RequestBody Map<String, String> requestBody) {
        String roleString = requestBody.get("role");

        // Vérifier si le rôle est valide
        Role newRole;
        try {
            newRole = Role.valueOf(roleString);
        } catch (IllegalArgumentException e) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(null);
        }

        // Vérifier si l'utilisateur existe
        Optional<User> optionalUser = userService.findUserById(id);
        if (optionalUser.isEmpty()) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(null);
        }

        // Modifier le rôle de l'utilisateur
        User user = optionalUser.get();
        user.setRole(newRole);
        User updatedUser = userService.saveUser(user);

        return ResponseEntity.ok(updatedUser);
    }


    @GetMapping("/GetuserById/{id}")
        public ResponseEntity<User> getUserById(@PathVariable Long id) {
            // Implémenter la logique pour récupérer l'utilisateur par son ID
            User user = userService.getUserById(id);
            if (user != null) {
                return ResponseEntity.ok(user);
            } else {
                return ResponseEntity.notFound().build();
            }
        }



    }



