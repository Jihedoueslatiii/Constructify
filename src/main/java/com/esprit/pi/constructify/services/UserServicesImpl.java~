package com.esprit.pi.constructify.services;

import com.esprit.pi.constructify.entities.Role;
import com.esprit.pi.constructify.entities.User;
import com.esprit.pi.constructify.repositories.UserRepository;
import lombok.AllArgsConstructor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import java.time.LocalDateTime;
import java.util.UUID;
import java.util.List;
import java.util.Optional;

@Service
@AllArgsConstructor
public class UserServicesImpl implements IUserService {

    private  UserRepository userRepository;
    private final PasswordEncoder passwordEncoder;



    @Override
    public User findByEmail(String email) {
        return userRepository.findByEmail(email).orElse(null);
    }

    public LocalDateTime calculateExpiryDate(int expiryTimeInHours) {
        return LocalDateTime.now().plusHours(expiryTimeInHours);
    }

        @Autowired
    public void UserService(UserRepository userRepository) {
        this.userRepository = userRepository;

    }

    @Override
    public boolean existsByEmail(String email) {
        return userRepository.findByEmail(email).isPresent();
    }

    @Override
    public Optional<User> findUserById(Long id) {
        return userRepository.findById(id);
    }

    @Transactional
    public User saveUser(User user) {
        String hashedPassword = passwordEncoder.encode(user.getPassword()); // Hacher le mot de passe
        user.setPassword(hashedPassword); // Remplacer le mot de passe en clair par le mot de passe haché
        System.out.println("Mot de passe en clair : " + user.getPassword());
        System.out.println("Mot de passe haché : " + hashedPassword);
        
        return userRepository.save(user); // Sauvegarder l'utilisateur dans la base de données
    }

    @Transactional
    public User saveUser2(User user) {
        System.out.println("Mot de passe en clair : " + user.getPassword());
        return userRepository.save(user); // Sauvegarder l'utilisateur dans la base de données
    }


    @Override
    public List<User> getAllUsers() {
        return userRepository.findAll();
    }

    @Override
    public List<User> getUsersByRole(Role role) {
        return userRepository.findByRole(role);
    }

    @Override
    public void deleteUser(Long userId) {
        Optional<User> user = userRepository.findById(userId);
        if (user.isPresent()) {
            userRepository.deleteById(userId);
        } else {
            throw new RuntimeException("Utilisateur non trouvé avec l'ID: " + userId);
        }
    }

    @Override
    public User getUserById(Long id) {
        return userRepository.findById(id).orElse(null);
    }

    @Override
    public List<User> getUsersByTeam(Long teamId) {
        return userRepository.findByTeamId(teamId);
    }
    @Override
    public String generateConfirmationToken() {
        return UUID.randomUUID().toString();
    }
    @Override
    public User findByConfirmationToken(String token) {
        return userRepository.findByConfirmationToken(token)
                .orElseThrow(() -> new RuntimeException("Your account has been deleted due to inactivity. " +
                        "The confirmation token has expired, and you did not confirm your account within the required time. " +
                        "Please register again to create a new account."));
    }

    @Override
    public void removeUserFromTeam(Long userId) {
        User user = userRepository.findById(userId)
                .orElseThrow(() -> new RuntimeException("User not found"));

        user.setTeamId(null); // Désaffecter l'utilisateur de son équipe
        userRepository.save(user);
    }
    @Override
    public Page<User> getUsers(int page, int size) {
        Pageable pageable = PageRequest.of(page, size);
        return userRepository.findAll(pageable);
    }
    @Override
    public Page<User> getUsersByRole(String role, int page, int size) {
        Pageable pageable = PageRequest.of(page, size);
        return userRepository.findByRole(role, pageable);
    }
}
